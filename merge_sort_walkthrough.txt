- Split the list in half
- Split it the result of the first split again 


Implementing Merge Sort in Python
The implementation of the merge sort algorithm needs two different pieces:

1 - A function that recursively splits the input in half
2 - A function that merges both halves, producing a sorted array

merge() receives two different sorted arrays that need to be merged together. The process to accomplish this is straightforward:

Lines 8 and 14 check whether either of the arrays is empty. If one of them is, then there’s nothing to merge, so the function returns the other array.

Line 23 starts a while loop that ends whenever the result contains all the elements from both of the supplied arrays. The goal is to look into both arrays and combine their items to produce a sorted list.

Line 28 compares the elements at the head of both arrays, selects the smaller value, and appends it to the end of the resultant array.

Lines 40 and 44 append any remaining items to the result if all the elements from either of the arrays were already used.

Line 53 acts as the stopping condition for the recursion. If the input array contains fewer than two elements, then the function returns the array. Notice that this condition could be triggered by receiving either a single item or an empty array. In both cases, there’s nothing left to sort, so the function should return.

Line 56 computes the middle point of the array.

Line 62 calls merge(), passing both sorted halves as the arrays.